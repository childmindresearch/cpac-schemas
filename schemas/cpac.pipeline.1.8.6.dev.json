{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "C-PAC pipeline configuration",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "FROM": {
      "type": "string"
    },
    "pipeline_setup": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pipeline_name": {
          "type": "string",
          "description": "Name for this pipeline configuration - useful for identification. This string will be sanitized and used in filepaths.",
          "default": "cpac-default-pipeline"
        },
        "output_directory": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "path": {
              "type": "string",
              "description": "Directory where C-PAC should write out processed data, logs, and crash reports.\n - If running in a container (Singularity/Docker), you can simply set this to an arbitrary name like '/outputs', and then map (-B/-v) your desired output directory to that label.\n - If running outside a container, this should be a full path to a directory.",
              "default": "/outputs/output"
            },
            "source_outputs_dir": {
              "type": "string",
              "description": "(Optional) Path to a BIDS-Derivatives directory that already has outputs.\n  - This option is intended to ingress already-existing resources from an output directory without writing new outputs back into the same directory.\n  - If provided, C-PAC will ingress the already-computed outputs from this directory and continue the pipeline from where they leave off.\n  - If left as 'None', C-PAC will ingress any already-computed outputs from the output directory you provide above in 'path' instead, the default behavior.",
              "default": "None"
            },
            "pull_source_once": {
              "type": "boolean",
              "description": "Set to True to make C-PAC ingress the outputs from the primary output directory if they exist, even if a source_outputs_dir is provided\n  - Setting to False will pull from source_outputs_dir every time, over-writing any calculated outputs in the main output directory\n  - C-PAC will still pull from source_outputs_dir if the main output directory is empty, however",
              "default": true
            },
            "write_func_outputs": {
              "type": "boolean",
              "description": "Include extra versions and intermediate steps of functional preprocessing in the output directory.",
              "default": false
            },
            "write_debugging_outputs": {
              "type": "boolean",
              "description": "Include extra outputs in the output directory that may be of interest when more information is needed.",
              "default": false
            },
            "output_tree": {
              "type": "string",
              "enum": [
                "default",
                "ndmg"
              ],
              "description": "Output directory format and structure.\nOptions: default, ndmg",
              "default": "default"
            },
            "quality_control": {
              "type": "object",
              "description": "Quality control outputs",
              "additionalProperties": false,
              "properties": {
                "generate_quality_control_images": {
                  "type": "boolean",
                  "description": "Generate quality control pages containing preprocessing and derivative outputs.",
                  "default": true
                },
                "generate_xcpqc_files": {
                  "type": "boolean",
                  "description": "Generate eXtensible Connectivity Pipeline-style quality control files",
                  "default": false
                }
              }
            },
            "user_defined": {
              "type": [
                "null",
                "string"
              ],
              "description": "Arbitrary user defined string that will be included in every output sidecar file.",
              "default": null
            }
          }
        },
        "working_directory": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "Directory where C-PAC should store temporary and intermediate files.\n - This directory must be saved if you wish to re-run your pipeline from where you left off (if not completed).\n - NOTE: As it stores all intermediate files, this directory can grow to become very large, especially for data with a large amount of TRs.\n - If running in a container (Singularity/Docker), you can simply set this to an arbitrary name like '/work', and then map (-B/-v) your desired output directory to that label.\n - If running outside a container, this should be a full path to a directory.\n - This can be written to '/tmp' if you do not intend to save your working directory.",
              "default": "/outputs/working"
            },
            "remove_working_dir": {
              "type": "boolean",
              "description": "Deletes the contents of the Working Directory after running. This saves disk space, but any additional preprocessing or analysis will have to be completely re-run.",
              "default": true
            }
          },
          "additionalProperties": false
        },
        "log_directory": {
          "type": "object",
          "properties": {
            "run_logging": {
              "type": "boolean",
              "description": "Whether to write log details of the pipeline run to the logging files.",
              "default": true
            },
            "path": {
              "type": "string",
              "default": "/outputs/logs"
            },
            "graphviz": {
              "type": "object",
              "description": "Configuration options for logging visualizations of the workflow graph",
              "properties": {
                "entire_workflow": {
                  "type": "object",
                  "description": "Configuration for a graphviz visualization of the entire workflow. See https://fcp-indi.github.io/docs/developer/nodes#CPAC.pipeline.nipype_pipeline_engine.Workflow.write_graph for details about the various options",
                  "properties": {
                    "generate": {
                      "type": "boolean",
                      "description": "Whether to generate the graph visualization",
                      "default": false
                    },
                    "graph2use": {
                      "type": "array",
                      "description": "Options: [orig, hierarchical, flat, exec, colored]",
                      "items": {
                        "type": "string",
                        "enum": [
                          "orig",
                          "hierarchical",
                          "flat",
                          "exec",
                          "colored"
                        ]
                      }
                    },
                    "format": {
                      "type": "array",
                      "description": "Options: [svg, png]",
                      "items": {
                        "type": "string",
                        "enum": [
                          "svg",
                          "png"
                        ]
                      }
                    },
                    "simple_form": {
                      "type": "boolean",
                      "description": "The node name will be displayed in the form `nodename (package)` when On or `nodename.Class.package` when Off",
                      "default": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "save_workflow": {
              "type": "boolean",
              "description": "Save a serialized version of the workflow. Can be used with `test_config` save workflow without running the pipeline.",
              "default": false
            }
          },
          "additionalProperties": false
        },
        "crash_log_directory": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "path": {
              "type": "string",
              "description": "Directory where CPAC should write crash logs.",
              "default": "/outputs/crash"
            }
          }
        },
        "system_config": {
          "type": "object",
          "properties": {
            "fail_fast": {
              "type": "boolean",
              "description": "Stop worklow execution on first crash?",
              "default": false
            },
            "random_seed": {
              "description": "Random seed used to fix the state of execution.\nIf unset, each process uses its own default.\nIf set, a `random.log` file will be generated logging the random seed and each node to which that seed was applied.\nIf set to a positive integer (up to 2147483647), that integer will be used to seed each process that accepts a random seed.\nIf set to 'random', a random positive integer (up to 2147483647) will be generated and that seed will be used to seed each process that accepts a random seed.",
              "anyOf": [
                {
                  "type": "null"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "string",
                  "enum": [
                    "random"
                  ]
                }
              ]
            },
            "on_grid": {
              "type": "object",
              "description": "Select Off if you intend to run CPAC on a single machine. If set to On, CPAC will attempt to submit jobs through the job scheduler / resource manager selected below.",
              "additionalProperties": false,
              "properties": {
                "run": {
                  "type": "boolean",
                  "default": false
                },
                "resource_manager": {
                  "type": "string",
                  "description": "Sun Grid Engine (SGE), Portable Batch System (PBS), or Simple Linux Utility for Resource Management (SLURM).\nOnly applies if you are running on a grid or compute cluster.",
                  "enum": [
                    "SGE",
                    "PBS",
                    "SLURM"
                  ],
                  "default": "SGE"
                },
                "SGE": {
                  "type": "object",
                  "properties": {
                    "parallel_environment": {
                      "type": "string",
                      "description": "SGE Parallel Environment to use when running CPAC.\nOnly applies when you are running on a grid or compute cluster using SGE.",
                      "default": "mpi_smp"
                    },
                    "queue": {
                      "type": "string",
                      "description": "SGE Queue to use when running CPAC.\nOnly applies when you are running on a grid or compute cluster using SGE.",
                      "default": "all.q"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "maximum_memory_per_participant": {
              "type": "number",
              "description": "The maximum amount of memory each participant's workflow can allocate. Use this to place an upper bound of memory usage.\n- Warning: 'Memory Per Participant' multiplied by 'Number of Participants to Run Simultaneously' must not be more than the total amount of RAM.\n- Conversely, using too little RAM can impede the speed of a pipeline run.\n- It is recommended that you set this to a value that when multiplied by 'Number of Participants to Run Simultaneously' is as much RAM you can safely allocate.",
              "default": 1
            },
            "raise_insufficient": {
              "type": "boolean",
              "description": "Prior to running a pipeline C-PAC makes a rough estimate of a worst-case-scenario maximum concurrent memory usage with high-resoltion data, raising an exception describing the recommended minimum memory allocation for the given configuration.\nTurning this option off will allow pipelines to run without allocating the recommended minimum, allowing for more efficient runs at the risk of out-of-memory crashes (use at your own risk)",
              "default": true
            },
            "observed_usage": {
              "type": "object",
              "description": "A callback.log file from a previous run can be provided to estimate memory usage based on that run.",
              "additionalProperties": false,
              "properties": {
                "callback_log": {
                  "type": [
                    "null",
                    "string"
                  ],
                  "description": "Path to callback log file with previously observed usage. Can be overridden with the commandline flag `--runtime_usage`."
                },
                "buffer": {
                  "type": "number",
                  "description": "Percent. E.g., `buffer: 10` would estimate 1.1 * the observed memory usage from the callback log provided in \"usage\". Can be overridden with the commandline flag `--runtime_buffer`.",
                  "default": 10
                }
              }
            },
            "max_cores_per_participant": {
              "type": "integer",
              "description": "The maximum amount of cores (on a single machine) or slots on a node (on a cluster/grid) to allocate per participant.\n- Setting this above 1 will parallelize each participant's workflow where possible. If you wish to dedicate multiple cores to ANTS-based anatomical registration (below), this value must be equal or higher than the amount of cores provided to ANTS.\n- The maximum number of cores your run can possibly employ will be this setting multiplied by the number of participants set to run in parallel (the 'Number of Participants to Run Simultaneously' setting).",
              "default": 1
            },
            "num_ants_threads": {
              "type": "integer",
              "description": "The number of cores to allocate to ANTS-based anatomical registration per participant.\n- Multiple cores can greatly speed up this preprocessing step.\n- This number cannot be greater than the number of cores per participant.",
              "default": 1
            },
            "num_OMP_threads": {
              "type": "integer",
              "description": "The number of cores to allocate to processes that use OpenMP.",
              "default": 1
            },
            "num_participants_at_once": {
              "type": "integer",
              "description": "The number of participant workflows to run at the same time.\n- The maximum number of cores your run can possibly employ will be this setting multiplied by the number of cores dedicated to each participant (the 'Maximum Number of Cores Per Participant' setting).",
              "default": 1
            },
            "FSLDIR": {
              "type": "string",
              "description": "Full path to the FSL version to be used by CPAC. If you have specified an FSL path in your .bashrc file, this path will be set automatically.",
              "default": "/usr/share/fsl/5.0"
            }
          },
          "additionalProperties": false
        },
        "Amazon-AWS": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "aws_output_bucket_credentials": {
              "type": [
                "null",
                "string"
              ],
              "description": "If setting the 'Output Directory' to an S3 bucket, insert the path to your AWS credentials file here."
            },
            "s3_encryption": {
              "type": "boolean",
              "description": "Enable server-side 256-AES encryption on data to the S3 bucket",
              "default": false
            }
          }
        },
        "Debugging": {
          "type": "object",
          "additionalItems": false,
          "properties": {
            "verbose": {
              "type": "boolean",
              "description": "Verbose developer messages.",
              "default": false
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "pipeline_name"
      ]
    },
    "surface_analysis": {
      "type": "object",
      "description": "PREPROCESSING",
      "additionalProperties": false,
      "properties": {
        "freesurfer": {
          "type": "object",
          "description": "Will run Freesurfer for surface-based analysis. Will output traditional Freesurfer derivatives. If you wish to employ Freesurfer outputs for brain masking or tissue segmentation in the voxel-based pipeline, select those 'Freesurfer-' labeled options further below in anatomical_preproc.",
          "additionalProperties": false,
          "properties": {
            "run_reconall": {
              "type": "boolean",
              "default": false
            },
            "reconall_args": {
              "type": [
                "null",
                "string"
              ],
              "description": "Add extra arguments to recon-all command"
            }
          }
        },
        "post_freesurfer": {
          "type": "object",
          "description": "Run ABCD-HCP post FreeSurfer and fMRISurface pipeline",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "default": false
            },
            "subcortical_gray_labels": {
              "type": "string",
              "default": "/opt/dcan-tools/pipeline/global/config/FreeSurferSubcorticalLabelTableLut.txt"
            },
            "freesurfer_labels": {
              "type": "string",
              "default": "/opt/dcan-tools/pipeline/global/config/FreeSurferAllLut.txt"
            },
            "surf_atlas_dir": {
              "type": "string",
              "default": "/opt/dcan-tools/pipeline/global/templates/standard_mesh_atlases"
            },
            "gray_ordinates_dir": {
              "type": "string",
              "default": "/opt/dcan-tools/pipeline/global/templates/Greyordinates"
            },
            "gray_ordinates_res": {
              "type": "number",
              "default": 2
            },
            "high_res_mesh": {
              "type": "number",
              "default": 164
            },
            "low_res_mesh": {
              "type": "number",
              "default": 32
            },
            "fmri_res": {
              "type": "number",
              "default": 2
            },
            "smooth_fwhm": {
              "type": "number",
              "default": 2
            }
          }
        }
      }
    },
    "longitudinal_template_generation": {
      "type": "object",
      "description": "If you have multiple T1w's, you can generate your own run-specific custom T1w template to serve as an intermediate to the standard template for anatomical registration.",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "description": "This runs before the main pipeline as it requires multiple T1w sessions at once.",
          "default": false
        },
        "average_method": {
          "type": "string",
          "description": "Freesurfer longitudinal template algorithm using FSL FLIRT Method to average the dataset at each iteration of the template creation\nOptions: median, mean or std",
          "enum": [
            "median",
            "mean",
            "std"
          ],
          "default": "median"
        },
        "dof": {
          "type": "integer",
          "description": "Degree of freedom for FLIRT in the template creation\nOptions: 12 (affine), 9 (traditional), 7 (global rescale) or 6 (rigid body)",
          "enum": [
            12,
            9,
            7,
            6
          ],
          "default": 12
        },
        "interp": {
          "type": "string",
          "description": "Interpolation parameter for FLIRT in the template creation\nOptions: trilinear, nearestneighbour, sinc or spline",
          "enum": [
            "trilinear",
            "nearestneighbour",
            "sinc",
            "spline"
          ],
          "default": "trilinear"
        },
        "cost": {
          "type": "string",
          "description": "Cost function for FLIRT in the template creation\nOptions: corratio, mutualinfo, normmi, normcorr, leastsq, labeldiff or bbr",
          "enum": [
            "corratio",
            "mutualinfo",
            "normmi",
            "normcorr",
            "leastsq",
            "labeldiff",
            "bbr"
          ],
          "default": "corratio"
        },
        "thread_pool": {
          "type": "integer",
          "description": "Number of threads used for one run of the template generation algorithm",
          "default": 2
        },
        "convergence_threshold": {
          "type": "number",
          "description": "Threshold of transformation distance to consider that the loop converged\n(-1 means numpy.finfo(np.float64).eps and is the default)",
          "default": -1
        }
      }
    },
    "anatomical_preproc": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "default": true
        },
        "run_t2": {
          "type": "boolean",
          "default": false
        },
        "non_local_means_filtering": {
          "type": "object",
          "description": "Non-local means filtering via ANTs DenoiseImage",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "array",
              "description": "this is a fork option",
              "items": {
                "type": "boolean"
              }
            },
            "noise_model": {
              "type": "string",
              "description": "options: 'Gaussian' or 'Rician'",
              "enum": [
                "Gaussian",
                "Rician"
              ],
              "default": "Gaussian"
            }
          }
        },
        "n4_bias_field_correction": {
          "type": "object",
          "description": "N4 bias field correction via ANTs",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "array",
              "description": "this is a fork option",
              "items": {
                "type": "boolean"
              }
            },
            "shrink_factor": {
              "type": "integer",
              "description": "An integer to resample the input image to save computation time. Shrink factors <= 4 are commonly used.",
              "default": 2
            }
          }
        },
        "t1t2_bias_field_correction": {
          "type": "object",
          "description": "Bias field correction based on square root of T1w * T2w",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "default": false
            },
            "BiasFieldSmoothingSigma": {
              "type": "number",
              "default": 5
            }
          }
        },
        "acpc_alignment": {
          "type": "object",
          "properties": {
            "run": {
              "type": "boolean",
              "default": false
            },
            "run_before_preproc": {
              "type": "boolean",
              "description": "Run ACPC alignment before non-local means filtering or N4 bias correction",
              "default": true
            },
            "brain_size": {
              "type": "number",
              "description": "ACPC size of brain in z-dimension in mm.\nDefault: 150mm for human data.",
              "default": 150
            },
            "FOV_crop": {
              "type": "string",
              "description": "Choose a tool to crop the FOV in ACPC alignment. Using FSL's robustfov or flirt command. \nDefault: robustfov for human data, flirt for monkey data.",
              "enum": [
                "robustfov",
                "flirt"
              ],
              "default": "robustfov"
            },
            "acpc_target": {
              "type": "string",
              "description": "ACPC Target\noptions: 'brain' or 'whole-head'\n  note: 'brain' requires T1w_brain_ACPC_template below to be populated",
              "enum": [
                "brain",
                "whole-head"
              ],
              "default": "whole-head"
            },
            "align_brain_mask": {
              "type": "boolean",
              "description": "Run ACPC alignment on brain mask \nIf the brain mask is in native space, turn it on\nIf the brain mask is ACPC aligned, turn it off",
              "default": false
            },
            "T1w_ACPC_template": {
              "type": "string",
              "description": "ACPC aligned template",
              "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_1mm.nii.gz"
            },
            "T1w_brain_ACPC_template": {
              "type": "string",
              "description": "ACPC aligned template",
              "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_1mm_brain.nii.gz"
            },
            "T2w_ACPC_template": {
              "type": "string",
              "description": "ACPC aligned template",
              "default": "None"
            },
            "T2w_brain_ACPC_template": {
              "type": "string",
              "description": "ACPC aligned template",
              "default": "None"
            }
          },
          "additionalProperties": false
        },
        "brain_extraction": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "default": true
            },
            "using": {
              "type": "array",
              "description": "using: ['3dSkullStrip', 'BET', 'UNet', 'niworkflows-ants', 'FreeSurfer-ABCD', 'FreeSurfer-BET-Tight', 'FreeSurfer-BET-Loose']\nthis is a fork option",
              "items": {
                "type": "string",
                "enum": [
                  "3dSkullStrip",
                  "BET",
                  "UNet",
                  "niworkflows-ants",
                  "FreeSurfer-ABCD",
                  "FreeSurfer-BET-Tight",
                  "FreeSurfer-BET-Loose"
                ]
              }
            },
            "AFNI-3dSkullStrip": {
              "type": "object",
              "description": "option parameters",
              "additionalProperties": false,
              "properties": {
                "mask_vol": {
                  "type": "boolean",
                  "description": "Output a mask volume instead of a skull-stripped volume. The mask volume containes 0 to 6, which represents voxel's postion. If set to True, C-PAC will use this output to generate anatomical brain mask for further analysis.",
                  "default": false
                },
                "shrink_factor": {
                  "type": "number",
                  "description": "Set the threshold value controlling the brain vs non-brain voxels. Default is 0.6.",
                  "default": 0.6
                },
                "var_shrink_fac": {
                  "type": "boolean",
                  "description": "Vary the shrink factor at every iteration of the algorithm. This prevents the likelihood of surface getting stuck in large pools of CSF before reaching the outer surface of the brain. Default is On.",
                  "default": true
                },
                "shrink_factor_bot_lim": {
                  "type": "number",
                  "description": "The shrink factor bottom limit sets the lower threshold when varying the shrink factor. Default is 0.4, for when edge detection is used (which is On by default), otherwise the default value is 0.65.",
                  "default": 0.4
                },
                "avoid_vent": {
                  "type": "boolean",
                  "description": "Avoids ventricles while skullstripping.",
                  "default": true
                },
                "n_iterations": {
                  "type": "number",
                  "description": "Set the number of iterations. Default is 250.The number of iterations should depend upon the density of your mesh.",
                  "default": 250
                },
                "pushout": {
                  "type": "boolean",
                  "description": "While expanding, consider the voxels above and not only the voxels below",
                  "default": true
                },
                "touchup": {
                  "type": "boolean",
                  "description": "Perform touchup operations at the end to include areas not covered by surface expansion.",
                  "default": true
                },
                "fill_hole": {
                  "type": "number",
                  "description": "Give the maximum number of pixels on either side of the hole that can be filled. The default is 10 only if 'Touchup' is On - otherwise, the default is 0.",
                  "default": 10
                },
                "NN_smooth": {
                  "type": "number",
                  "description": "Perform nearest neighbor coordinate interpolation every few iterations. Default is 72.",
                  "default": 72
                },
                "smooth_final": {
                  "type": "number",
                  "description": "Perform final surface smoothing after all iterations. Default is 20.",
                  "default": 20
                },
                "avoid_eyes": {
                  "type": "boolean",
                  "description": "Avoid eyes while skull stripping. Default is On.",
                  "default": true
                },
                "use_edge": {
                  "type": "boolean",
                  "description": "Use edge detection to reduce leakage into meninges and eyes. Default is On.",
                  "default": true
                },
                "exp_frac": {
                  "type": "number",
                  "description": "Speed of expansion.",
                  "default": 0.1
                },
                "push_to_edge": {
                  "type": "boolean",
                  "description": "Perform aggressive push to edge. This might cause leakage. Default is Off.",
                  "default": false
                },
                "use_skull": {
                  "type": "boolean",
                  "description": "Use outer skull to limit expansion of surface into the skull in case of very strong shading artifacts. Use this only if you have leakage into the skull.",
                  "default": false
                },
                "perc_int": {
                  "type": "number",
                  "description": "Percentage of segments allowed to intersect surface. It is typically a number between 0 and 0.1, but can include negative values (which implies no testing for intersection).",
                  "default": 0
                },
                "max_inter_iter": {
                  "type": "number",
                  "description": "Number of iterations to remove intersection problems. With each iteration, the program automatically increases the amount of smoothing to get rid of intersections. Default is 4.",
                  "default": 4
                },
                "fac": {
                  "type": "number",
                  "description": "Multiply input dataset by FAC if range of values is too small.",
                  "default": 1
                },
                "blur_fwhm": {
                  "type": "number",
                  "description": "Blur dataset after spatial normalization. Recommended when you have lots of CSF in brain and when you have protruding gyri (finger like). If so, recommended value range is 2-4. Otherwise, leave at 0.",
                  "default": 0
                },
                "monkey": {
                  "type": "boolean",
                  "description": "Set it as True if processing monkey data with AFNI",
                  "default": false
                }
              }
            },
            "FSL-BET": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "frac": {
                  "type": "number",
                  "description": "Set the threshold value controling the brain vs non-brain voxels, default is 0.5",
                  "default": 0.5
                },
                "mask_boolean": {
                  "type": "boolean",
                  "description": "Mask created along with skull stripping. It should be `On`, if selected functionalMasking :  ['Anatomical_Refined'] and `FSL` as skull-stripping method.",
                  "default": true
                },
                "mesh_boolean": {
                  "type": "boolean",
                  "description": "Mesh created along with skull stripping",
                  "default": false
                },
                "outline": {
                  "type": "boolean",
                  "description": "Create a surface outline image",
                  "default": false
                },
                "padding": {
                  "type": "boolean",
                  "description": "Add padding to the end of the image, improving BET.Mutually exclusive with functional,reduce_bias,robust,padding,remove_eyes,surfaces",
                  "default": false
                },
                "radius": {
                  "type": "number",
                  "description": "Integer value of head radius",
                  "default": 0
                },
                "reduce_bias": {
                  "type": "boolean",
                  "description": "Reduce bias and cleanup neck. Mutually exclusive with functional,reduce_bias,robust,padding,remove_eyes,surfaces",
                  "default": false
                },
                "remove_eyes": {
                  "type": "boolean",
                  "description": "Eyes and optic nerve cleanup. Mutually exclusive with functional,reduce_bias,robust,padding,remove_eyes,surfaces",
                  "default": false
                },
                "robust": {
                  "type": "boolean",
                  "description": "Robust brain center estimation. Mutually exclusive with functional,reduce_bias,robust,padding,remove_eyes,surfaces",
                  "default": true
                },
                "skull": {
                  "type": "boolean",
                  "description": "Create a skull image",
                  "default": false
                },
                "surfaces": {
                  "type": "boolean",
                  "description": "Gets additional skull and scalp surfaces by running bet2 and betsurf. This is mutually exclusive with reduce_bias, robust, padding, remove_eyes",
                  "default": false
                },
                "threshold": {
                  "type": "boolean",
                  "description": "Apply thresholding to segmented brain image and mask",
                  "default": false
                },
                "vertical_gradient": {
                  "type": "number",
                  "description": "Vertical gradient in fractional intensity threshold (-1,1)",
                  "default": 0.0
                }
              }
            },
            "UNet": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "unet_model": {
                  "type": "string",
                  "description": "UNet model",
                  "default": "s3://fcp-indi/resources/cpac/resources/Site-All-T-epoch_36.model"
                }
              }
            },
            "niworkflows-ants": {
              "type": "object",
              "description": "Template to be used during niworkflows-ants. It is not necessary to change this path unless you intend to use a non-standard template.",
              "additionalProperties": false,
              "properties": {
                "template_path": {
                  "type": "string",
                  "description": "niworkflows-ants Brain extraction template",
                  "default": "/ants_template/oasis/T_template0.nii.gz"
                },
                "mask_path": {
                  "type": "string",
                  "description": "niworkflows-ants probability mask",
                  "default": "/ants_template/oasis/T_template0_BrainCerebellumProbabilityMask.nii.gz"
                },
                "regmask_path": {
                  "type": "string",
                  "description": "niworkflows-ants registration mask (can be optional)",
                  "default": "/ants_template/oasis/T_template0_BrainCerebellumRegistrationMask.nii.gz"
                }
              }
            },
            "FreeSurfer-BET": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "T1w_brain_template_mask_ccs": {
                  "type": "string",
                  "description": "Template to be used for FreeSurfer-BET brain extraction in CCS-options pipeline",
                  "default": "/ccs_template/MNI152_T1_1mm_first_brain_mask.nii.gz"
                }
              }
            }
          }
        }
      }
    },
    "segmentation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "description": "Automatically segment anatomical images into white matter, gray matter, and CSF based on prior probability maps.",
          "default": true
        },
        "tissue_segmentation": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "using": {
              "type": "array",
              "description": "using: ['FSL-FAST', 'Template_Based', 'ANTs_Prior_Based', 'FreeSurfer']\nthis is a fork point",
              "items": {
                "type": "string",
                "enum": [
                  "FSL-FAST",
                  "Template_Based",
                  "ANTs_Prior_Based",
                  "FreeSurfer"
                ]
              }
            },
            "FSL-FAST": {
              "type": "object",
              "description": "option parameters",
              "additionalProperties": false,
              "properties": {
                "thresholding": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "use": {
                      "type": "string",
                      "description": "thresholding of the tissue segmentation probability maps\noptions: 'Auto', 'Custom'",
                      "default": "Auto",
                      "enum": [
                        "Auto",
                        "Custom"
                      ]
                    },
                    "Custom": {
                      "type": "object",
                      "description": "Set the threshold value for the segmentation probability masks (CSF, White Matter, and Gray Matter). The values remaining will become the binary tissue masks.\nA good starting point is 0.95.",
                      "additionalProperties": false,
                      "properties": {
                        "CSF_threshold_value": {
                          "type": "number",
                          "description": "CSF (cerebrospinal fluid) threshold.",
                          "default": 0.95
                        },
                        "WM_threshold_value": {
                          "type": "number",
                          "description": "White matter threshold.",
                          "default": 0.95
                        },
                        "GM_threshold_value": {
                          "type": "number",
                          "description": "Gray matter threshold.",
                          "default": 0.95
                        }
                      }
                    }
                  }
                },
                "use_priors": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "run": {
                      "type": "boolean",
                      "description": "Use template-space tissue priors to refine the binary tissue masks generated by segmentation.",
                      "default": true
                    },
                    "priors_path": {
                      "type": "string",
                      "description": "Full path to a directory containing binarized prior probability maps.\nThese maps are included as part of the 'Image Resource Files' package available on the Install page of the User Guide.\nIt is not necessary to change this path unless you intend to use non-standard priors.",
                      "default": "$FSLDIR/data/standard/tissuepriors/2mm"
                    },
                    "WM_path": {
                      "type": "string",
                      "description": "Full path to a binarized White Matter prior probability map.\nIt is not necessary to change this path unless you intend to use non-standard priors.",
                      "default": "$priors_path/avg152T1_white_bin.nii.gz"
                    },
                    "GM_path": {
                      "type": "string",
                      "description": "Full path to a binarized Gray Matter prior probability map.\nIt is not necessary to change this path unless you intend to use non-standard priors.",
                      "default": "$priors_path/avg152T1_gray_bin.nii.gz"
                    },
                    "CSF_path": {
                      "type": "string",
                      "description": "Full path to a binarized CSF prior probability map.\nIt is not necessary to change this path unless you intend to use non-standard priors.",
                      "default": "$priors_path/avg152T1_csf_bin.nii.gz"
                    }
                  }
                }
              }
            },
            "Template_Based": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "template_for_segmentation": {
                  "type": "array",
                  "description": "These masks should be in the same space of your registration template, e.g. if you choose 'EPI Template' , below tissue masks should also be EPI template tissue masks.\nOptions: ['T1_Template', 'EPI_Template']",
                  "items": {
                    "type": "string",
                    "enum": [
                      "T1_Template",
                      "EPI_Template"
                    ]
                  }
                },
                "WHITE": {
                  "type": "string",
                  "description": "These masks are included as part of the 'Image Resource Files' package available on the Install page of the User Guide.\nFull path to a binarized White Matter mask.",
                  "default": "$FSLDIR/data/standard/tissuepriors/2mm/avg152T1_white_bin.nii.gz"
                },
                "GRAY": {
                  "type": "string",
                  "description": "These masks are included as part of the 'Image Resource Files' package available on the Install page of the User Guide.\nFull path to a binarized Gray Matter mask.",
                  "default": "$FSLDIR/data/standard/tissuepriors/2mm/avg152T1_gray_bin.nii.gz"
                },
                "CSF": {
                  "type": "string",
                  "description": "These masks are included as part of the 'Image Resource Files' package available on the Install page of the User Guide.\nFull path to a binarized CSF mask.",
                  "default": "$FSLDIR/data/standard/tissuepriors/2mm/avg152T1_csf_bin.nii.gz"
                }
              }
            },
            "ANTs_Prior_Based": {
              "type": "object",
              "additionalProperties": false,
              "description": "Generate white matter, gray matter, CSF masks based on antsJointLabelFusion ANTs Prior-based Segmentation workflow that has shown optimal results for non-human primate data.",
              "properties": {
                "template_brain_list": {
                  "type": "array",
                  "description": "The atlas image assumed to be used in ANTs Prior-based Segmentation.",
                  "items": {
                    "type": "string"
                  }
                },
                "template_segmentation_list": {
                  "type": "array",
                  "description": "The atlas segmentation images.\nFor performing ANTs Prior-based segmentation method\nthe number of specified segmentations should be identical to the number of atlas brain image sets.\neg.\nANTs_prior_seg_template_brain_list :\n  - atlas1.nii.gz\n  - atlas2.nii.gz\nANTs_prior_seg_template_segmentation_list:\n  - segmentation1.nii.gz\n  - segmentation1.nii.gz",
                  "items": {
                    "type": "string"
                  },
                  "default": [
                    "/cpac_templates/MacaqueYerkes19_T1w_0.5mm_desc-JLC_Segmentation.nii.gz",
                    "/cpac_templates/J_Macaque_11mo_atlas_nACQ_194x252x160space_0.5mm_desc-JLC_Segmentation.nii.gz"
                  ]
                },
                "CSF_label": {
                  "type": "array",
                  "description": "Label values corresponding to CSF/GM/WM in atlas file\nIt is not necessary to change this values unless your CSF/GM/WM label values are different from Freesurfer Color Lookup Table.\nhttps://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/AnatomicalROI/FreeSurferColorLUT\nLabel values corresponding to CSF in multiatlas file",
                  "items": {
                    "type": "integer"
                  }
                },
                "GM_label": {
                  "type": "array",
                  "description": "Label values corresponding to CSF/GM/WM in atlas file\nIt is not necessary to change this values unless your CSF/GM/WM label values are different from Freesurfer Color Lookup Table.\nhttps://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/AnatomicalROI/FreeSurferColorLUT\n\nLabel values corresponding to Gray Matter in multiatlas file",
                  "items": {
                    "type": "integer"
                  }
                },
                "WM_label": {
                  "type": "array",
                  "description": "Label values corresponding to CSF/GM/WM in atlas file\nIt is not necessary to change this values unless your CSF/GM/WM label values are different from Freesurfer Color Lookup Table.\nhttps://surfer.nmr.mgh.harvard.edu/fswiki/FsTutorial/AnatomicalROI/FreeSurferColorLUT\n\nLabel values corresponding to White Matter in multiatlas file",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            },
            "FreeSurfer": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "erode": {
                  "type": "number",
                  "description": "Use mri_binarize --erode option to erode segmentation masks",
                  "default": 0
                },
                "CSF_label": {
                  "type": "array",
                  "description": "Label values corresponding to CSF in FreeSurfer aseg segmentation file",
                  "items": {
                    "type": "integer"
                  }
                },
                "GM_label": {
                  "type": "array",
                  "description": "Label values corresponding to Gray Matter in FreeSurfer aseg segmentation file",
                  "items": {
                    "type": "integer"
                  }
                },
                "WM_label": {
                  "type": "array",
                  "description": "Label values corresponding to White Matter in FreeSurfer aseg segmentation file",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "registration_workflows": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "anatomical_registration": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "default": true
            },
            "resolution_for_anat": {
              "type": "string",
              "description": "The resolution to which anatomical images should be transformed during registration. This is the resolution at which processed anatomical files will be output.",
              "default": "2mm"
            },
            "T1w_brain_template": {
              "type": "string",
              "description": "Template to be used during registration. It is not necessary to change this path unless you intend to use a non-standard template.",
              "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_${resolution_for_anat}_brain.nii.gz"
            },
            "T1w_template": {
              "type": "string",
              "description": "Template to be used during registration. It is not necessary to change this path unless you intend to use a non-standard template.",
              "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_${resolution_for_anat}.nii.gz"
            },
            "T1w_brain_template_mask": {
              "type": "string",
              "description": "Template to be used during registration. It is not necessary to change this path unless you intend to use a non-standard template.",
              "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz"
            },
            "reg_with_skull": {
              "type": "boolean",
              "description": "Register skull-on anatomical image to a template.",
              "default": true
            },
            "registration": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "using": {
                  "type": "array",
                  "description": "using: ['ANTS', 'FSL', 'FSL-linear']\nthis is a fork point\nselecting both ['ANTS', 'FSL'] will run both and fork the pipeline",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ANTS",
                      "FSL",
                      "FSL-linear"
                    ]
                  }
                },
                "ANTs": {
                  "type": "object",
                  "description": "option parameters",
                  "additionalProperties": false,
                  "properties": {
                    "use_lesion_mask": {
                      "type": "boolean",
                      "description": "If a lesion mask is available for a T1w image, use it to improve the ANTs' registration ANTS registration only.",
                      "default": false
                    },
                    "T1_registration": {
                      "type": "array",
                      "description": "ANTs parameters for T1-template-based registration",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "collapse-output-transforms": {
                                "type": "number"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "dimensionality": {
                                "type": "integer"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "initial-moving-transform": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "initializationFeature": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "transforms": {
                                "type": "array",
                                "items": {
                                  "patternProperties": {
                                    "^(Rigid)|(Affine)|(SyN)$": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "gradientStep": {
                                          "type": "number"
                                        },
                                        "updateFieldVarianceInVoxelSpace": {
                                          "type": "number"
                                        },
                                        "totalFieldVarianceInVoxelSpace": {
                                          "type": "number"
                                        },
                                        "metric": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "type": {
                                              "type": "string"
                                            },
                                            "metricWeight": {
                                              "type": "number"
                                            },
                                            "radius": {
                                              "type": "number"
                                            },
                                            "numberOfBins": {
                                              "type": "number"
                                            },
                                            "samplingStrategy": {
                                              "type": "string"
                                            },
                                            "samplingPercentage": {
                                              "type": "number"
                                            }
                                          }
                                        },
                                        "convergence": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "iteration": {
                                              "type": "string"
                                            },
                                            "convergenceThreshold": {
                                              "type": "number"
                                            },
                                            "convergenceWindowSize": {
                                              "type": "number"
                                            }
                                          }
                                        },
                                        "smoothing-sigmas": {
                                          "type": "string"
                                        },
                                        "shrink-factors": {
                                          "type": "string"
                                        },
                                        "use-histogram-matching": {
                                          "type": "boolean"
                                        },
                                        "winsorize-image-intensities": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "lowerQuantile": {
                                              "type": "number"
                                            },
                                            "upperQuantile": {
                                              "type": "number"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "interpolation": {
                      "type": "string",
                      "description": "Interpolation method for writing out transformed anatomical images.\nPossible values: Linear, BSpline, LanczosWindowedSinc",
                      "enum": [
                        "Linear",
                        "BSpline",
                        "LanczosWindowedSinc"
                      ],
                      "default": "LanczosWindowedSinc"
                    }
                  }
                },
                "FSL-FNIRT": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "fnirt_config": {
                      "type": "string",
                      "description": "Configuration file to be used by FSL to set FNIRT parameters. It is not necessary to change this path unless you intend to use custom FNIRT parameters or a non-standard template.",
                      "default": "T1_2_MNI152_2mm"
                    },
                    "ref_resolution": {
                      "type": "string",
                      "description": "The resolution to which anatomical images should be transformed during registration.\nThis is the resolution at which processed anatomical files will be output. \nspecifically for monkey pipeline",
                      "default": "2mm"
                    },
                    "ref_mask": {
                      "type": "string",
                      "description": "Reference mask for FSL registration.",
                      "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_dil.nii.gz"
                    },
                    "FNIRT_T1w_brain_template": {
                      "type": "string",
                      "description": "Template to be used during registration.\nIt is for monkey pipeline specifically.",
                      "default": "None"
                    },
                    "FNIRT_T1w_template": {
                      "type": "string",
                      "description": "Template to be used during registration.\nIt is for monkey pipeline specifically.",
                      "default": "None"
                    },
                    "interpolation": {
                      "type": "string",
                      "description": "Interpolation method for writing out transformed anatomical images.\nPossible values: trilinear, sinc, spline",
                      "default": "sinc",
                      "enum": [
                        "trilinear",
                        "sinc",
                        "spline"
                      ]
                    },
                    "identity_matrix": {
                      "type": "string",
                      "description": "Identity matrix used during FSL-based resampling of anatomical-space data throughout the pipeline.\nIt is not necessary to change this path unless you intend to use a different template.",
                      "default": "/usr/share/fsl/5.0/etc/flirtsch/ident.mat"
                    },
                    "ref_mask_res-2": {
                      "type": "string",
                      "description": "Reference mask with 2mm resolution to be used during FNIRT-based brain extraction in ABCD-options pipeline.",
                      "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm_brain_mask_dil.nii.gz"
                    },
                    "T1w_template_res-2": {
                      "type": "string",
                      "description": "Template with 2mm resolution to be used during FNIRT-based brain extraction in ABCD-options pipeline.",
                      "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_2mm.nii.gz"
                    }
                  }
                }
              }
            },
            "overwrite_transform": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "run": {
                  "type": "boolean",
                  "default": false
                },
                "using": {
                  "type": "string",
                  "description": "Choose the tool to overwrite transform, currently only support 'FSL' to overwrite 'ANTs' transforms in ABCD-options pipeline.\nusing: 'FSL'",
                  "default": "FSL",
                  "enum": [
                    "FSL"
                  ]
                }
              }
            }
          }
        },
        "functional_registration": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "coregistration": {
              "type": "object",
              "description": "functional (BOLD/EPI) registration to anatomical (structural/T1)",
              "additionalProperties": false,
              "properties": {
                "run": {
                  "type": "boolean",
                  "default": true
                },
                "reference": {
                  "type": "string",
                  "description": "reference: 'brain' or 'restore-brain'\nIn ABCD-options pipeline, 'restore-brain' is used as coregistration reference",
                  "default": "brain",
                  "enum": [
                    "brain",
                    "restore-brain"
                  ]
                },
                "using": {
                  "type": "string",
                  "description": "Choose FSL or ABCD as coregistration method",
                  "default": "FSL",
                  "enum": [
                    "FSL",
                    "ABCD"
                  ]
                },
                "input": {
                  "type": "string",
                  "description": "Choose brain or whole-head as coregistration input",
                  "default": "brain",
                  "enum": [
                    "brain",
                    "whole-head"
                  ]
                },
                "interpolation": {
                  "type": "string",
                  "default": "trilinear",
                  "description": "Choose coregistration interpolation"
                },
                "cost": {
                  "type": "string",
                  "default": "corratio",
                  "description": "Choose coregistration cost function"
                },
                "dof": {
                  "type": "integer",
                  "description": "Choose coregistration degree of freedom",
                  "default": 6
                },
                "arguments": {
                  "type": "string",
                  "description": "Extra arguments for FSL flirt",
                  "default": "None"
                },
                "func_input_prep": {
                  "type": "object",
                  "properties": {
                    "reg_with_skull": {
                      "type": "boolean",
                      "description": "Choose whether to use functional brain or skull as the input to functional-to-anatomical registration",
                      "default": false
                    },
                    "input": {
                      "type": "array",
                      "description": "Choose whether to use the mean of the functional/EPI as the input to functional-to-anatomical registration or one of the volumes from the functional 4D timeseries that you choose.\ninput: ['Mean_Functional', 'Selected_Functional_Volume', 'fmriprep_reference']",
                      "items": {
                        "type": "string",
                        "enum": [
                          "Mean_Functional",
                          "Selected_Functional_Volume",
                          "fmriprep_reference"
                        ]
                      }
                    },
                    "Mean Functional": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "n4_correct_func": {
                          "type": "boolean",
                          "description": "Run ANTs' N4 Bias Field Correction on the input BOLD (EPI)\nthis can increase tissue contrast which may improve registration quality in some data",
                          "default": false
                        }
                      }
                    },
                    "Selected Functional Volume": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "func_reg_input_volume": {
                          "type": "number",
                          "description": "Only for when 'Use as Functional-to-Anatomical Registration Input' is set to 'Selected Functional Volume'.\nInput the index of which volume from the functional 4D timeseries input file you wish to use as the input for functional-to-anatomical registration.",
                          "default": 0
                        }
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "boundary_based_registration": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "run": {
                      "type": "array",
                      "description": "this is a fork point\nrun: [On, Off] - this will run both and fork the pipeline",
                      "items": {
                        "type": "boolean"
                      }
                    },
                    "bbr_schedule": {
                      "type": "string",
                      "description": "Standard FSL 5.0 Scheduler used for Boundary Based Registration.\nIt is not necessary to change this path unless you intend to use non-standard MNI registration.",
                      "default": "/usr/share/fsl/5.0/etc/flirtsch/bbr.sch"
                    },
                    "reference": {
                      "type": "string",
                      "description": "reference for boundary based registration\noptions: 'whole-head' or 'brain'",
                      "enum": [
                        "whole-head",
                        "brain"
                      ],
                      "default": "whole-head"
                    },
                    "bbr_wm_map": {
                      "type": "string",
                      "description": "choose which FAST map to generate BBR WM mask\noptions: 'probability_map', 'partial_volume_map'",
                      "enum": [
                        "probability_map",
                        "partial_volume_map"
                      ],
                      "default": "probability_map"
                    },
                    "bbr_wm_mask_args": {
                      "type": "string",
                      "description": "optional FAST arguments to generate BBR WM mask",
                      "default": "-thr 0.5 -bin"
                    }
                  }
                }
              }
            },
            "EPI_registration": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "run": {
                  "type": "boolean",
                  "description": "directly register the mean functional to an EPI template instead of applying the anatomical T1-to-template transform to the functional data that has been coregistered to anatomical/T1 space",
                  "default": false
                },
                "using": {
                  "type": "array",
                  "description": " using: ['ANTS', 'FSL', 'FSL-linear']\nthis is a fork point\nex. selecting both ['ANTS', 'FSL'] will run both and fork the pipeline",
                  "items": {
                    "type": "string"
                  }
                },
                "EPI_template": {
                  "type": "string",
                  "description": "EPI template for direct functional-to-template registration\n(bypassing coregistration and the anatomical-to-template transforms)",
                  "default": "s3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz"
                },
                "EPI_template_mask": {
                  "type": "string",
                  "description": "EPI template mask.",
                  "default": "None"
                },
                "ANTs": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "parameters": {
                      "type": "array",
                      "description": "EPI registration configuration - synonymous with T1_registration parameters under anatomical registration above",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "collapse-output-transforms": {
                                "type": "number"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "dimensionality": {
                                "type": "integer"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "initial-moving-transform": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "initializationFeature": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "transforms": {
                                "type": "array",
                                "items": {
                                  "patternProperties": {
                                    "^(Rigid)|(Affine)|(SyN)$": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "gradientStep": {
                                          "type": "number"
                                        },
                                        "updateFieldVarianceInVoxelSpace": {
                                          "type": "number"
                                        },
                                        "totalFieldVarianceInVoxelSpace": {
                                          "type": "number"
                                        },
                                        "metric": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "type": {
                                              "type": "string"
                                            },
                                            "metricWeight": {
                                              "type": "number"
                                            },
                                            "radius": {
                                              "type": "number"
                                            },
                                            "numberOfBins": {
                                              "type": "number"
                                            },
                                            "samplingStrategy": {
                                              "type": "string"
                                            },
                                            "samplingPercentage": {
                                              "type": "number"
                                            }
                                          }
                                        },
                                        "convergence": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "iteration": {
                                              "type": "string"
                                            },
                                            "convergenceThreshold": {
                                              "type": "number"
                                            },
                                            "convergenceWindowSize": {
                                              "type": "number"
                                            }
                                          }
                                        },
                                        "smoothing-sigmas": {
                                          "type": "string"
                                        },
                                        "shrink-factors": {
                                          "type": "string"
                                        },
                                        "use-histogram-matching": {
                                          "type": "boolean"
                                        },
                                        "winsorize-image-intensities": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "lowerQuantile": {
                                              "type": "number"
                                            },
                                            "upperQuantile": {
                                              "type": "number"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "interpolation": {
                      "type": "string",
                      "description": "Interpolation method for writing out transformed EPI images.\nPossible values: Linear, BSpline, LanczosWindowedSinc",
                      "enum": [
                        "Linear",
                        "BSpline",
                        "LanczosWindowedSinc"
                      ],
                      "default": "LanczosWindowedSinc"
                    }
                  }
                },
                "FSL-FNIRT": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "fnirt_config": {
                      "type": "string",
                      "description": "Configuration file to be used by FSL to set FNIRT parameters.\nIt is not necessary to change this path unless you intend to use custom FNIRT parameters or a non-standard template.",
                      "default": "T1_2_MNI152_2mm"
                    },
                    "interpolation": {
                      "type": "string",
                      "description": "Interpolation method for writing out transformed EPI images.\nPossible values: trilinear, sinc, spline",
                      "enum": [
                        "trilinear",
                        "sinc",
                        "spline"
                      ],
                      "default": "sinc"
                    },
                    "identity_matrix": {
                      "type": "string",
                      "description": "Identity matrix used during FSL-based resampling of BOLD-space data throughout the pipeline.\nIt is not necessary to change this path unless you intend to use a different template.",
                      "default": "/usr/share/fsl/5.0/etc/flirtsch/ident.mat"
                    }
                  }
                }
              }
            },
            "func_registration_to_template": {
              "type": "object",
              "description": "these options modify the application (to the functional data), not the calculation, of the T1-to-template and EPI-to-template transforms calculated earlier during registration",
              "additionalProperties": false,
              "properties": {
                "run": {
                  "type": "boolean",
                  "description": "apply the functional-to-template (T1 template) registration transform to the functional data",
                  "default": true
                },
                "run_EPI": {
                  "type": "boolean",
                  "description": "apply the functional-to-template (EPI template) registration transform to the functional data",
                  "default": false
                },
                "output_resolution": {
                  "type": "object",
                  "properties": {
                    "func_preproc_outputs": {
                      "type": "string",
                      "description": "The resolution (in mm) to which the preprocessed, registered functional timeseries outputs are written into.\nNOTE: selecting a 1 mm or 2 mm resolution might substantially increase your RAM needs- these resolutions should be selected with caution. for most cases, 3 mm or 4 mm resolutions are suggested.\nNOTE: this also includes the single-volume 3D preprocessed functional data, such as the mean functional (mean EPI) in template space",
                      "default": "3mm"
                    },
                    "func_derivative_outputs": {
                      "type": "string",
                      "description": "The resolution (in mm) to which the registered derivative outputs are written into.\nNOTE: this is for the single-volume functional-space outputs (i.e. derivatives) thus, a higher resolution may not result in a large increase in RAM needs as above",
                      "default": "3mm"
                    }
                  },
                  "additionalProperties": false
                },
                "target_template": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "using": {
                      "type": "array",
                      "description": "choose which template space to transform derivatives towards\nusing: ['T1_template', 'EPI_template']\nthis is a fork point\nNOTE: this will determine which registration transform to use to warp the functional outputs and derivatives to template space",
                      "items": {
                        "type": "string",
                        "enum": [
                          "T1_template",
                          "EPI_template"
                        ]
                      }
                    },
                    "T1_template": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "T1w_brain_template_funcreg": {
                          "type": "string",
                          "description": "Standard Skull Stripped Template. Used as a reference image for functional registration.\nThis can be different than the template used as the reference/fixed for T1-to-template registration.",
                          "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_${func_resolution}_brain.nii.gz"
                        },
                        "T1w_template_funcreg": {
                          "type": "string",
                          "description": "Standard Anatomical Brain Image with Skull.\nThis can be different than the template used as the reference/fixed for T1-to-template registration.",
                          "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_${func_resolution}.nii.gz"
                        },
                        "T1w_brain_template_mask_funcreg": {
                          "type": "string",
                          "description": "Template to be used during registration.\nIt is not necessary to change this path unless you intend to use a non-standard template.",
                          "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_${func_resolution}_brain_mask.nii.gz"
                        },
                        "T1w_template_for_resample": {
                          "type": "string",
                          "description": "a standard template for resampling if using float resolution",
                          "default": "$FSLDIR/data/standard/MNI152_T1_1mm_brain.nii.gz"
                        }
                      }
                    },
                    "EPI_template": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "EPI_template_funcreg": {
                          "type": "string",
                          "description": "EPI template for direct functional-to-template registration (bypassing coregistration and the anatomical-to-template transforms)",
                          "default": "s3://fcp-indi/resources/cpac/resources/epi_hbn.nii.gz"
                        },
                        "EPI_template_mask_funcreg": {
                          "type": "string",
                          "description": "EPI template mask.",
                          "default": "None"
                        },
                        "EPI_template_for_resample": {
                          "type": "string",
                          "description": "a standard template for resampling if using float resolution",
                          "default": "$FSLDIR/data/standard/MNI152_T1_1mm_brain.nii.gz"
                        }
                      }
                    }
                  }
                },
                "ANTs_pipelines": {
                  "type": "object",
                  "additionalItems": false,
                  "properties": {
                    "interpolation": {
                      "type": "string",
                      "description": "Interpolation method for writing out transformed functional images.\nPossible values: Linear, BSpline, LanczosWindowedSinc",
                      "enum": [
                        "Linear",
                        "BSpline",
                        "LanczosWindowedSinc"
                      ],
                      "default": "LanczosWindowedSinc"
                    }
                  },
                  "additionalProperties": false
                },
                "FNIRT_pipelines": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "interpolation": {
                      "type": "string",
                      "description": "Interpolation method for writing out transformed functional images.\nPossible values: trilinear, sinc, spline",
                      "enum": [
                        "trilinear",
                        "sinc",
                        "spline"
                      ],
                      "default": "sinc"
                    },
                    "identity_matrix": {
                      "type": "string",
                      "description": "Identity matrix used during FSL-based resampling of functional-space data throughout the pipeline.\nIt is not necessary to change this path unless you intend to use a different template.",
                      "default": "/usr/share/fsl/5.0/etc/flirtsch/ident.mat"
                    }
                  }
                },
                "apply_transform": {
                  "type": "object",
                  "properties": {
                    "using": {
                      "type": "string",
                      "description": "options: 'default', 'abcd', 'single_step_resampling_from_stc', 'dcan_nhp'\n'default': apply func-to-anat and anat-to-template transforms on motion corrected functional image.\n'abcd': apply motion correction, func-to-anat and anat-to-template transforms on each of raw functional volume using FSL applywarp based on ABCD-HCP pipeline.\n'single_step_resampling_from_stc': apply motion correction, func-to-anat and anat-to-template transforms on each of slice-time-corrected functional volume using ANTs antsApplyTransform based on fMRIPrep pipeline.\n  - if 'single_step_resampling_from_stc', 'template' is the only valid option for ``nuisance_corrections: 2-nuisance_regression: space``",
                      "enum": [
                        "default",
                        "abcd",
                        "single_step_resampling_from_stc",
                        "dcan_nhp"
                      ],
                      "default": "default"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "functional_preproc": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "default": true
        },
        "truncation": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "start_tr": {
              "type": "number",
              "description": "First timepoint to include in analysis.\nDefault is 0 (beginning of timeseries).\nFirst timepoint selection in the scan parameters in the data configuration file, if present, will over-ride this selection.\nNote: the selection here applies to all scans of all participants.",
              "default": 0
            },
            "stop_tr": {
              "type": [
                "number",
                "string"
              ],
              "description": "Last timepoint to include in analysis.\nDefault is None or End (end of timeseries).\nLast timepoint selection in the scan parameters in the data configuration file, if present, will over-ride this selection.\nNote: the selection here applies to all scans of all participants.",
              "default": "None"
            }
          }
        },
        "scaling": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "description": "Scale functional raw data, usually used in rodent pipeline",
              "default": false
            },
            "scaling_factor": {
              "type": "number",
              "description": "Scale the size of the dataset voxels by the factor.",
              "default": 10
            }
          }
        },
        "despiking": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "array",
              "description": "Run AFNI 3dDespike\nthis is a fork point\nrun: [On, Off] - this will run both and fork the pipeline",
              "items": {
                "type": "boolean"
              }
            }
          }
        },
        "slice_timing_correction": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "array",
              "description": "Interpolate voxel time courses so they are sampled at the same time points.\nthis is a fork point\nrun: [On, Off] - this will run both and fork the pipeline",
              "items": {
                "type": "boolean"
              }
            },
            "tpattern": {
              "type": [
                "null",
                "string"
              ],
              "description": "use specified slice time pattern rather than one in header",
              "default": null
            },
            "tzero": {
              "type": [
                "null",
                "integer"
              ],
              "description": "align each slice to given time offset\nThe default alignment time is the average of the 'tpattern' values (either from the dataset header or from the tpattern option).",
              "default": null
            }
          }
        },
        "motion_estimates_and_correction": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "default": true
            },
            "motion_estimates": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "calculate_motion_first": {
                  "type": "boolean",
                  "description": "calculate motion statistics BEFORE slice-timing correction",
                  "default": false
                },
                "calculate_motion_after": {
                  "type": "boolean",
                  "description": "calculate motion statistics AFTER motion correction",
                  "default": true
                }
              }
            },
            "motion_correction": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "using": {
                  "type": "array",
                  "description": "using: ['3dvolreg', 'mcflirt']\nthis is a fork point",
                  "items": {
                    "type": "string",
                    "enum": [
                      "3dvolreg",
                      "mcflirt"
                    ]
                  }
                },
                "AFNI-3dvolreg": {
                  "type": "object",
                  "description": "option parameters",
                  "additionalProperties": false,
                  "properties": {
                    "functional_volreg_twopass": {
                      "type": "boolean",
                      "description": "This option is useful when aligning high-resolution datasets that may need more alignment than a few voxels.",
                      "default": true
                    }
                  }
                },
                "motion_correction_reference": {
                  "type": "array",
                  "description": "Choose motion correction reference. Options: mean, median, selected_volume, fmriprep_reference",
                  "items": {
                    "type": "string",
                    "enum": [
                      "mean",
                      "median",
                      "selected_volume",
                      "fmriprep_reference"
                    ]
                  }
                },
                "motion_correction_reference_volume": {
                  "type": "number",
                  "description": "Choose motion correction reference volume",
                  "default": 0
                }
              }
            },
            "motion_estimate_filter": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "run": {
                  "type": "array",
                  "description": "Filter physiological (respiration) artifacts from the head motion estimates.\nAdapted from DCAN Labs filter.\nhttps://www.ohsu.edu/school-of-medicine/developmental-cognition-and-neuroimaging-lab\nhttps://www.biorxiv.org/content/10.1101/337360v1.full.pdf\nthis is a fork point\nrun: [On, Off] - this will run both and fork the pipeline",
                  "items": {
                    "type": "boolean"
                  }
                },
                "filters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "filter_type": {
                        "type": "string",
                        "description": "options: \"notch\", \"lowpass\"",
                        "enum": [
                          "notch",
                          "lowpass"
                        ]
                      },
                      "filter_order": {
                        "type": "integer",
                        "description": "Number of filter coefficients."
                      },
                      "breathing_rate_min": {
                        "description": "Dataset-wide respiratory rate data from breathing belt.\nNotch filter requires either:\n\"breathing_rate_min\" and \"breathing_rate_max\"\nor\n\"center_frequency\" and \"filter_bandwitdh\".\nLowpass filter requires either:\n\"breathing_rate_min\"\nor\n\"lowpass_cutoff\".\nIf \"breathing_rate_min\" (for lowpass and notch filter)\nand \"breathing_rate_max\" (for notch filter) are set,\nthe values set in \"lowpass_cutoff\" (for lowpass filter),\n\"center_frequency\" and \"filter_bandwidth\" (for notch filter)\noptions are ignored.\n\nLowest Breaths-Per-Minute in dataset.\nFor both notch and lowpass filters."
                      },
                      "breathing_rate_max": {
                        "description": "Dataset-wide respiratory rate data from breathing belt.\nNotch filter requires either:\n\"breathing_rate_min\" and \"breathing_rate_max\"\nor\n\"center_frequency\" and \"filter_bandwitdh\".\nLowpass filter requires either:\n\"breathing_rate_min\"\nor\n\"lowpass_cutoff\".\nIf \"breathing_rate_min\" (for lowpass and notch filter)\nand \"breathing_rate_max\" (for notch filter) are set,\nthe values set in \"lowpass_cutoff\" (for lowpass filter),\n\"center_frequency\" and \"filter_bandwidth\" (for notch filter)\noptions are ignored.\n\nHighest Breaths-Per-Minute in dataset.\nFor notch filter."
                      },
                      "center_frequency": {
                        "description": "notch filter direct customization parameters\n\nmutually exclusive with breathing_rate options above.\nIf breathing_rate_min and breathing_rate_max are provided, the following parameters will be ignored.\n\nthe center frequency of the notch filter"
                      },
                      "filter_bandwidth": {
                        "description": "notch filter direct customization parameters\n\nmutually exclusive with breathing_rate options above.\nIf breathing_rate_min and breathing_rate_max are provided, the following parameters will be ignored.\n\nthe width of the notch filter"
                      },
                      "lowpass_cutoff": {
                        "description": "lowpass filter direct customization parameter\n\nmutually exclusive with breathing_rate options above.\nIf breathing_rate_min is provided, the following parameter will be ignored.\n\nthe frequency cutoff of the filter"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "distortion_correction": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "array",
              "description": "this is a fork point\nrun: [On, Off] - this will run both and fork the pipeline",
              "items": {
                "type": "boolean"
              }
            },
            "using": {
              "type": "array",
              "description": "using: ['PhaseDiff', 'Blip', 'Blip-FSL-TOPUP']\nPhaseDiff - Perform field map correction using a single phase difference image, a subtraction of the two phase images from each echo. Default scanner for this method is SIEMENS.\nBlip - Uses AFNI 3dQWarp to calculate the distortion unwarp for EPI field maps of opposite/same phase encoding direction.\nBlip-FSL-TOPUP - Uses FSL TOPUP to calculate the distortion unwarp for EPI field maps of opposite/same phase encoding direction.",
              "items": {
                "type": "string",
                "enum": [
                  "PhaseDiff",
                  "Blip",
                  "Blip-FSL-TOPUP"
                ]
              }
            },
            "PhaseDiff": {
              "type": "object",
              "description": "option parameters",
              "additionalProperties": false,
              "properties": {
                "fmap_skullstrip_option": {
                  "type": "string",
                  "description": "ince the quality of the distortion heavily relies on the skull-stripping step, we provide a choice of method ('AFNI' for AFNI 3dSkullStrip or 'BET' for FSL BET).",
                  "enum": [
                    "BET",
                    "AFNI"
                  ],
                  "default": "BET"
                },
                "fmap_skullstrip_BET_frac": {
                  "type": "number",
                  "description": "Set the fraction value for the skull-stripping of the magnitude file. Depending on the data, a tighter extraction may be necessary in order to prevent noisy voxels from interfering with preparing the field map.\nThe default value is 0.5.",
                  "default": 0.5
                },
                "fmap_skullstrip_AFNI_threshold": {
                  "type": "number",
                  "description": "Set the threshold value for the skull-stripping of the magnitude file. Depending on the data, a tighter extraction may be necessary in order to prevent noisy voxels from interfering with preparing the field map.\nThe default value is 0.6.",
                  "default": 0.6
                }
              }
            },
            "Blip-FSL-TOPUP": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "warpres": {
                  "type": "number",
                  "description": "(approximate) resolution (in mm) of warp basis for the different sub-sampling levels, default 10",
                  "default": 10
                },
                "subsamp": {
                  "type": "number",
                  "description": "sub-sampling scheme, default 1",
                  "default": 1
                },
                "fwhm": {
                  "type": "number",
                  "description": "FWHM (in mm) of gaussian smoothing kernel, default 8",
                  "default": 8
                },
                "miter": {
                  "type": "number",
                  "description": "Max # of non-linear iterations, default 5",
                  "default": 5
                },
                "lambda": {
                  "type": "number",
                  "description": "Weight of regularisation, default depending on --ssqlambda and --regmod switches. See user documentation.",
                  "default": 1
                },
                "ssqlambda": {
                  "type": "number",
                  "description": "If set (=1), lambda is weighted by current ssq, default 1",
                  "default": 1
                },
                "regmod": {
                  "type": "string",
                  "description": "Model for regularisation of warp-field [membrane_energy bending_energy], default bending_energy",
                  "enum": [
                    "membrane_energy",
                    "bending_energy"
                  ],
                  "default": "bending_energy"
                },
                "estmov": {
                  "type": "number",
                  "description": "Estimate movements if set, default 1 (true)",
                  "default": 1
                },
                "minmet": {
                  "type": "number",
                  "description": "Minimisation method 0=Levenberg-Marquardt, 1=Scaled Conjugate Gradient, default 0 (LM)",
                  "default": 0
                },
                "splineorder": {
                  "type": "number",
                  "description": "Order of spline, 2->Qadratic spline, 3->Cubic spline. Default=3",
                  "default": 3
                },
                "numprec": {
                  "type": "string",
                  "description": "Precision for representing Hessian, double or float. Default double",
                  "default": "double"
                },
                "interp": {
                  "type": "string",
                  "description": "Image interpolation model, linear or spline. Default spline",
                  "enum": [
                    "model",
                    "linear",
                    "spline"
                  ],
                  "default": "spline"
                },
                "scale": {
                  "type": "number",
                  "description": "If set (=1), the images are individually scaled to a common mean, default 0 (false)",
                  "default": 0
                },
                "regrid": {
                  "type": "number",
                  "default": 1
                }
              }
            }
          }
        },
        "func_masking": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "using": {
              "type": "array",
              "description": "using: ['AFNI', 'FSL', 'FSL_AFNI', 'Anatomical_Refined', 'Anatomical_Based', 'Anatomical_Resampled', 'CCS_Anatomical_Refined']\n\nFSL_AFNI: fMRIPrep-style BOLD mask. Ref: https://github.com/nipreps/niworkflows/blob/a221f612/niworkflows/func/util.py#L246-L514\nnatomical_Refined: 1. binarize anat mask, in case it is not a binary mask. 2. fill holes of anat mask 3. init_bold_mask : input raw func \u2192 dilate init func brain mask 4. refined_bold_mask : input motion corrected func \u2192 dilate anatomical mask 5. get final func mask\nAnatomical_Based: Generate the BOLD mask by basing it off of the anatomical brain mask. Adapted from DCAN Lab's BOLD mask method from the ABCD pipeline.\nAnatomical_Resampled: Resample anatomical brain mask in standard space to get BOLD brain mask in standard space. Adapted from DCAN Lab's BOLD mask method from the ABCD pipeline. (\"Create fMRI resolution standard space files for T1w image, wmparc, and brain mask [\u2026] don't use FLIRT to do spline interpolation with -applyisoxfm for the 2mm and 1mm cases because it doesn't know the peculiarities of the MNI template FOVs\")\nCCS_Anatomical_Refined: Generate the BOLD mask by basing it off of the anatomical brain. Adapted from the BOLD mask method from the CCS pipeline.\n\nthis is a fork point",
              "items": {
                "type": "string",
                "enum": [
                  "AFNI",
                  "FSL",
                  "FSL_AFNI",
                  "Anatomical_Refined",
                  "Anatomical_Based",
                  "Anatomical_Resampled",
                  "CCS_Anatomical_Refined"
                ]
              }
            },
            "FSL-BET": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "functional_mean_boolean": {
                  "type": "boolean",
                  "description": "Apply to 4D FMRI data, if bold_bet_functional_mean_boolean : Off.\nMutually exclusive with functional, reduce_bias, robust, padding, remove_eyes, surfaces\nIt must be 'on' if select 'reduce_bias', 'robust', 'padding', 'remove_eyes', or 'bet_surfaces' on",
                  "default": false
                },
                "functional_mean_thr": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Set an intensity threshold to improve skull stripping performances of FSL BET on rodent scans.",
                  "properties": {
                    "run": {
                      "type": "boolean",
                      "default": false
                    },
                    "threshold_value": {
                      "type": "number",
                      "default": 98
                    }
                  }
                },
                "functional_mean_bias_correction": {
                  "type": "boolean",
                  "description": "Bias correct the functional mean image to improve skull stripping performances of FSL BET on rodent scans",
                  "default": false
                },
                "frac": {
                  "type": "number",
                  "description": "Set the threshold value controling the brain vs non-brain voxels.",
                  "default": 0.3
                },
                "mesh_boolean": {
                  "type": "boolean",
                  "description": "Mesh created along with skull stripping",
                  "default": false
                },
                "outline": {
                  "type": "boolean",
                  "description": "Create a surface outline image",
                  "default": false
                },
                "padding": {
                  "type": "boolean",
                  "description": "Add padding to the end of the image, improving BET.Mutually exclusive with functional,reduce_bias,robust,padding,remove_eyes,surfaces",
                  "default": false
                },
                "radius": {
                  "type": "number",
                  "description": "Integer value of head radius",
                  "default": 0
                },
                "reduce_bias": {
                  "type": "boolean",
                  "description": "Reduce bias and cleanup neck. Mutually exclusive with functional,reduce_bias,robust,padding,remove_eyes,surfaces",
                  "default": false
                },
                "remove_eyes": {
                  "type": "boolean",
                  "description": "Eyes and optic nerve cleanup. Mutually exclusive with functional,reduce_bias,robust,padding,remove_eyes,surfaces",
                  "default": false
                },
                "robust": {
                  "type": "boolean",
                  "description": "Robust brain center estimation. Mutually exclusive with functional,reduce_bias,robust,padding,remove_eyes,surfaces",
                  "default": false
                },
                "skull": {
                  "type": "boolean",
                  "description": "Create a skull image",
                  "default": false
                },
                "surfaces": {
                  "type": "boolean",
                  "description": "Gets additional skull and scalp surfaces by running bet2 and betsurf. This is mutually exclusive with reduce_bias, robust, padding, remove_eyes",
                  "default": false
                },
                "threshold": {
                  "type": "boolean",
                  "description": "Apply thresholding to segmented brain image and mask",
                  "default": false
                },
                "vertical_gradient": {
                  "type": "number",
                  "description": "Vertical gradient in fractional intensity threshold (-1,1)",
                  "minimum": -1,
                  "maximum": 1,
                  "default": 0.0
                }
              }
            },
            "FSL_AFNI": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "bold_ref": {},
                "brain_mask": {
                  "type": "string",
                  "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz"
                },
                "brain_probseg": {
                  "type": "string",
                  "default": "/usr/share/fsl/5.0/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask.nii.gz"
                }
              }
            },
            "Anatomical_Refined": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "anatomical_mask_dilation": {
                  "type": "boolean",
                  "description": "Choose whether or not to dilate the anatomical mask if you choose 'Anatomical_Refined' as the functional masking option. It will dilate one voxel if enabled.",
                  "default": false
                }
              }
            },
            "apply_func_mask_in_native_space": {
              "type": "boolean",
              "description": "Apply functional mask in native space",
              "default": true
            }
          }
        },
        "generate_func_mean": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "description": "Generate mean functional image",
              "default": true
            }
          }
        },
        "normalize_func": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "description": "Normalize functional image",
              "default": true
            }
          }
        }
      }
    },
    "nuisance_corrections": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "1-ICA-AROMA": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "array",
              "description": "this is a fork point\nrun: [On, Off] - this will run both and fork the pipeline",
              "items": {
                "type": "boolean"
              }
            },
            "denoising_type": {
              "type": "string",
              "description": "Types of denoising strategy:\nnonaggr: nonaggressive-partial component regression\naggr:    aggressive denoising",
              "enum": [
                "nonaggr",
                "aggr"
              ],
              "default": "nonaggr"
            }
          }
        },
        "2-nuisance_regression": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "array",
              "description": "this is a fork point\nrun: [On, Off] - this will run both and fork the pipeline",
              "items": {
                "type": "boolean"
              }
            },
            "space": {
              "type": "array",
              "description": "this is a fork point\nRun nuisance regression in native or template space\n- If set to [native, template], the number of outputs will be double what it would be if only one space were chosen. Nuisance regression will only be run once per fork.\n- If set to template, will use the brain mask configured in ``functional_preproc: func_masking: FSL_AFNI: brain_mask``\n- If ``registration_workflows: functional_registration: func_registration_to_template: apply_trasnform: using: single_step_resampling_from_stc``, this must only be set to template",
              "items": {
                "type": "string",
                "enum": [
                  "native",
                  "template"
                ]
              },
              "default": [
                "native"
              ]
            },
            "create_regressors": {
              "type": "boolean",
              "description": "switch to Off if nuisance regression is off and you don't want to write out the regressors",
              "default": true
            },
            "Regressors": {
              "type": "array",
              "description": "Select which nuisance signal corrections to apply",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "Name": {
                    "type": "string"
                  },
                  "Motion": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "include_delayed": {
                        "type": "boolean"
                      },
                      "include_squared": {
                        "type": "boolean"
                      },
                      "include_delayed_squared": {
                        "type": "boolean"
                      }
                    }
                  },
                  "aCompCor": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "summary": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "method": {
                            "type": "string"
                          },
                          "components": {
                            "type": "number"
                          }
                        }
                      },
                      "tissues": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "extraction_resolution": {
                        "type": "number"
                      }
                    }
                  },
                  "CerebrospinalFluid": {
                    "type": "object",
                    "properties": {
                      "summary": {
                        "type": "string"
                      },
                      "extraction_resolution": {
                        "type": "number"
                      },
                      "erode_mask": {
                        "type": "boolean"
                      }
                    }
                  },
                  "GlobalSignal": {
                    "type": "object",
                    "properties": {
                      "summary": {
                        "type": "string"
                      }
                    }
                  },
                  "PolyOrt": {
                    "type": "object",
                    "properties": {
                      "degree": {
                        "type": "number"
                      }
                    }
                  },
                  "Bandpass": {
                    "type": "object",
                    "properties": {
                      "bottom_frequency": {
                        "type": "number"
                      },
                      "top_frequency": {
                        "type": "number"
                      },
                      "method": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "lateral_ventricles_mask": {
              "type": "string",
              "description": "Standard Lateral Ventricles Binary Mask\nused in CSF mask refinement for CSF signal-related regressions",
              "default": "$FSLDIR/data/atlases/HarvardOxford/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz"
            },
            "bandpass_filtering_order": {
              "type": "string",
              "description": "Whether to run frequency filtering before or after nuisance regression.\nOptions: 'After' or 'Before'",
              "enum": [
                "After",
                "Before"
              ],
              "default": "After"
            },
            "regressor_masks": {
              "type": "object",
              "description": "Process and refine masks used to produce regressors and time series for regression.",
              "additionalProperties": false,
              "properties": {
                "erode_anatomical_brain_mask": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "run": {
                      "type": "boolean",
                      "description": "Erode binarized anatomical brain mask. If choosing True, please also set regressor_masks['erode_csf']['run']: True; anatomical_preproc['brain_extraction']['using']: niworkflows-ants.",
                      "default": false
                    },
                    "brain_mask_erosion_prop": {
                      "description": "Target volume ratio, if using erosion.\nDefault proportion is None for anatomical brain mask.\nIf using erosion, using both proportion and millimeters is not recommended."
                    },
                    "brain_mask_erosion_mm": {
                      "type": "number",
                      "description": "Erode brain mask in millimeters, default for brain mask is 30 mm\nBrain erosion default is using millimeters.",
                      "default": 30
                    },
                    "brain_erosion_mm": {
                      "type": [
                        "null",
                        "number"
                      ],
                      "description": "Erode binarized brain mask in millimeter"
                    }
                  }
                },
                "erode_csf": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "run": {
                      "type": "boolean",
                      "description": "Erode binarized csf tissue mask.",
                      "default": false
                    },
                    "csf_erosion_prop": {
                      "description": "Target volume ratio, if using erosion.\nDefault proportion is None for cerebrospinal fluid mask.\nIf using erosion, using both proportion and millimeters is not recommended.",
                      "default": null
                    },
                    "csf_mask_erosion_mm": {
                      "type": "number",
                      "description": "Erode cerebrospinal fluid mask in millimeters, default for cerebrospinal fluid is 30mm",
                      "default": 30
                    },
                    "csf_erosion_mm": {
                      "description": "Erode binarized cerebrospinal fluid mask in millimeter",
                      "default": null
                    }
                  }
                },
                "erode_wm": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "run": {
                      "type": "boolean",
                      "description": "Erode WM binarized tissue mask.",
                      "default": false
                    },
                    "wm_erosion_prop": {
                      "type": "number",
                      "description": "Target volume ratio, if using erosion.\nDefault proportion is 0.6 for white matter mask.\nIf using erosion, using both proportion and millimeters is not recommended.\nWhite matter erosion default is using proportion erosion method when use erosion for white matter.",
                      "default": 0.6
                    },
                    "wm_mask_erosion_mm": {
                      "type": [
                        "null",
                        "number"
                      ],
                      "description": "Erode white matter mask in millimeters, default for white matter is None",
                      "default": null
                    },
                    "wm_erosion_mm": {
                      "type": [
                        "null",
                        "number"
                      ],
                      "description": "Erode binarized white matter mask in millimeters",
                      "default": null
                    }
                  }
                },
                "erode_gm": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "run": {
                      "type": "boolean",
                      "description": "Erode gray matter binarized tissue mask.",
                      "default": false
                    },
                    "gm_erosion_prop": {
                      "type": "number",
                      "description": "Target volume ratio, if using erosion.\nIf using erosion, using both proportion and millimeters is not recommended.",
                      "default": 0.6
                    },
                    "gm_mask_erosion_mm": {
                      "type": [
                        "null",
                        "number"
                      ],
                      "description": "Erode gray matter mask in millimeters",
                      "default": null
                    },
                    "gm_erosion_mm": {
                      "type": [
                        "null",
                        "number"
                      ],
                      "description": "Erode binarized gray matter mask in millimeters",
                      "default": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "post_processing": {
      "type": "object",
      "description": "OUTPUTS AND DERIVATIVES",
      "additionalProperties": false,
      "properties": {
        "spatial_smoothing": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "default": true
            },
            "output": {
              "type": "array",
              "description": "Smooth the derivative outputs.\nSet as ['nonsmoothed'] to disable smoothing. Set as ['smoothed', 'nonsmoothed'] to get both.\n\nOptions:\n['smoothed', 'nonsmoothed']",
              "items": {
                "type": "string",
                "enum": [
                  "smoothed",
                  "nonsmoothed"
                ]
              }
            },
            "smoothing_method": {
              "type": "array",
              "description": "Tool to use for smoothing.\n'FSL' for FSL MultiImageMaths for FWHM provided\n'AFNI' for AFNI 3dBlurToFWHM for FWHM provided",
              "items": {
                "type": "string",
                "enum": [
                  "FSL",
                  "AFNI"
                ]
              }
            },
            "fwhm": {
              "type": "array",
              "description": "Full Width at Half Maximum of the Gaussian kernel used during spatial smoothing.\nthis is a fork point\ni.e. multiple kernels - fwhm: [4,6,8]",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "z-scoring": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "run": {
              "type": "boolean",
              "default": true
            },
            "output": {
              "type": "array",
              "description": "z-score standardize the derivatives. This may be needed for group-level analysis.\nSet as ['raw'] to disable z-scoring. Set as ['z-scored', 'raw'] to get both.\n\nOptions:\n['z-scored', 'raw']",
              "items": {
                "type": "string",
                "enum": [
                  "z-scored",
                  "raw"
                ]
              }
            }
          }
        }
      }
    },
    "timeseries_extraction": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "default": true
        },
        "tse_roi_paths": {
          "type": "object",
          "description": "Enter paths to region-of-interest (ROI) NIFTI files (.nii or .nii.gz) to be used for time-series extraction, and then select which types of analyses to run.\nDenote which analyses to run for each ROI path by listing the names below. For example, if you wish to run Avg and SpatialReg, you would enter: '/path/to/ROI.nii.gz': Avg, SpatialReg\navailable analyses:\n  /path/to/atlas.nii.gz: Avg, Voxel, SpatialReg",
          "patternProperties": {
            "^.*$": {
              "type": "string",
              "pattern": "^((Avg)|(Voxel)|(SpatialReg))(, ((Avg)|(Voxel)|(SpatialReg)))*$"
            }
          },
          "additionalProperties": false
        },
        "realignment": {
          "type": "string",
          "description": "Functional time-series and ROI realignment method: ['ROI_to_func'] or ['func_to_ROI']\n'ROI_to_func' will realign the atlas/ROI to functional space (fast)\n'func_to_ROI' will realign the functional time series to the atlas/ROI space\n\nNOTE: in rare cases, realigning the ROI to the functional space may result in small misalignments for very small ROIs - please double check your data if you see issues",
          "enum": [
            "ROI_to_func",
            "func_to_ROI"
          ],
          "default": "ROI_to_func"
        },
        "connectivity_matrix": {
          "type": "object",
          "description": "Create a connectivity matrix from timeseries data",
          "additionalProperties": false,
          "properties": {
            "using": {
              "type": "array",
              "description": "Options: ['AFNI', 'Nilearn', 'ndmg']",
              "items": {
                "type": "string",
                "enum": [
                  "AFNI",
                  "Nilearn",
                  "ndmg"
                ]
              }
            },
            "measure": {
              "type": "array",
              "description": "Options: ['Pearson', 'Partial']\nNote: These options are not configurable for ndmg, which will ignore these options",
              "items": {
                "type": "string",
                "enum": [
                  "Pearson",
                  "Partial",
                  "Spearman",
                  "MGC"
                ]
              }
            }
          }
        }
      }
    },
    "seed_based_correlation_analysis": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "description": "SCA - Seed-Based Correlation Analysis\nFor each extracted ROI Average time series, CPAC will generate a whole-brain correlation map.\nIt should be noted that for a given seed/ROI, SCA maps for ROI Average time series will be the same.",
          "default": false
        },
        "sca_roi_paths": {
          "type": "object",
          "description": "Enter paths to region-of-interest (ROI) NIFTI files (.nii or .nii.gz) to be used for seed-based correlation analysis, and then select which types of analyses to run.\nDenote which analyses to run for each ROI path by listing the names below. For example, if you wish to run Avg and MultReg, you would enter: '/path/to/ROI.nii.gz': Avg, MultReg\navailable analyses:\n  /path/to/atlas.nii.gz: Avg, DualReg, MultReg",
          "patternProperties": {
            "^.*$": {
              "type": "string",
              "pattern": "^((Avg)|(DualReg)|(MultReg))(, ((Avg)|(DualReg)|(MultReg)))*$"
            }
          },
          "additionalProperties": false
        },
        "norm_timeseries_for_DR": {
          "type": "boolean",
          "description": "Normalize each time series before running Dual Regression SCA.",
          "default": true
        }
      }
    },
    "amplitude_low_frequency_fluctuation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "description": "ALFF & f/ALFF\nCalculate Amplitude of Low Frequency Fluctuations (ALFF) and fractional ALFF (f/ALFF) for all voxels.",
          "default": true
        },
        "target_space": {
          "type": "array",
          "description": "space: Template or Native",
          "items": {
            "type": "string",
            "enum": [
              "Template",
              "Native"
            ]
          }
        },
        "highpass_cutoff": {
          "type": "array",
          "description": "Frequency cutoff (in Hz) for the high-pass filter used when calculating f/ALFF.",
          "items": {
            "type": "number"
          }
        },
        "lowpass_cutoff": {
          "type": "array",
          "description": "Frequency cutoff (in Hz) for the low-pass filter used when calculating f/ALFF",
          "items": {
            "type": "number"
          }
        }
      }
    },
    "regional_homogeneity": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "description": "ReHo\nCalculate Regional Homogeneity (ReHo) for all voxels.",
          "default": true
        },
        "target_space": {
          "type": "array",
          "description": "space: Template or Native",
          "items": {
            "type": "string",
            "enum": [
              "Template",
              "Native"
            ]
          }
        },
        "cluster_size": {
          "type": "integer",
          "description": "Number of neighboring voxels used when calculating ReHo\n7 (Faces)\n9 (Faces + Edges)\n27 (Faces + Edges + Corners)",
          "default": 27
        }
      }
    },
    "voxel_mirrored_homotopic_connectivity": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "description": "VMHC\nCalculate Voxel-mirrored Homotopic Connectivity (VMHC) for all voxels.",
          "default": true
        },
        "symmetric_registration": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "T1w_brain_template_symmetric": {
              "type": "string",
              "description": "Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.\nIt is not necessary to change this path unless you intend to use a non-standard symmetric template.",
              "default": "$FSLDIR/data/standard/MNI152_T1_${resolution_for_anat}_brain_symmetric.nii.gz"
            },
            "T1w_brain_template_symmetric_funcreg": {
              "type": "string",
              "description": "Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.\nIt is not necessary to change this path unless you intend to use a non-standard symmetric template.",
              "default": "$FSLDIR/data/standard/MNI152_T1_${func_resolution}_brain_symmetric.nii.gz"
            },
            "T1w_brain_template_symmetric_for_resample": {
              "type": "string",
              "description": "A reference symmetric brain template for resampling",
              "default": "$FSLDIR/data/standard/MNI152_T1_1mm_brain_symmetric.nii.gz"
            },
            "T1w_template_symmetric": {
              "type": "string",
              "description": "Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.\nIt is not necessary to change this path unless you intend to use a non-standard symmetric template.",
              "default": "$FSLDIR/data/standard/MNI152_T1_${resolution_for_anat}_symmetric.nii.gz"
            },
            "T1w_template_symmetric_funcreg": {
              "type": "string",
              "description": "Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.\nIt is not necessary to change this path unless you intend to use a non-standard symmetric template.",
              "default": "$FSLDIR/data/standard/MNI152_T1_${func_resolution}_symmetric.nii.gz"
            },
            "T1w_template_symmetric_for_resample": {
              "type": "string",
              "description": "A reference symmetric skull template for resampling",
              "default": "$FSLDIR/data/standard/MNI152_T1_1mm_symmetric.nii.gz"
            },
            "dilated_symmetric_brain_mask": {
              "type": "string",
              "description": "Included as part of the 'Image Resource Files' package available on the Install page of the User Guide.\nIt is not necessary to change this path unless you intend to use a non-standard symmetric template.",
              "default": "$FSLDIR/data/standard/MNI152_T1_${resolution_for_anat}_brain_mask_symmetric_dil.nii.gz"
            },
            "dilated_symmetric_brain_mask_for_resample": {
              "type": "string",
              "description": "A reference symmetric brain mask template for resampling",
              "default": "$FSLDIR/data/standard/MNI152_T1_1mm_brain_mask_symmetric_dil.nii.gz"
            }
          }
        }
      }
    },
    "network_centrality": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "description": "Calculate Degree, Eigenvector Centrality, or Functional Connectivity Density.",
          "default": true
        },
        "memory_allocation": {
          "type": "number",
          "description": "Maximum amount of RAM (in GB) to be used when calculating Degree Centrality.\nCalculating Eigenvector Centrality will require additional memory based on the size of the mask or number of ROI nodes.",
          "default": 1.0
        },
        "template_specification_file": {
          "type": "string",
          "description": "Full path to a NIFTI file describing the mask. Centrality will be calculated for all voxels within the mask.",
          "default": "/cpac_templates/Mask_ABIDE_85Percent_GM.nii.gz"
        },
        "degree_centrality": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "weight_options": {
              "type": "array",
              "description": "Enable/Disable degree centrality by selecting the connectivity weights\nweight_options: ['Binarized', 'Weighted']\ndisable this type of centrality with:\nweight_options: []",
              "items": {
                "type": "string",
                "enum": [
                  "Binarized",
                  "Weighted"
                ]
              }
            },
            "correlation_threshold_option": {
              "type": "string",
              "description": "Select the type of threshold used when creating the degree centrality adjacency matrix.\noptions:\n'Significance threshold', 'Sparsity threshold', 'Correlation threshold'",
              "enum": [
                "Significance threshold",
                "Sparsity threshold",
                "Correlation threshold"
              ],
              "default": "Sparsity threshold"
            },
            "correlation_threshold": {
              "type": "number",
              "description": "Based on the Threshold Type selected above, enter a Threshold Value.\nP-value for Significance Threshold\nSparsity value for Sparsity Threshold\nPearson's r value for Correlation Threshold",
              "default": 0.001
            }
          }
        },
        "eigenvector_centrality": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "weight_options": {
              "type": "array",
              "description": "Enable/Disable eigenvector centrality by selecting the connectivity weights\nweight_options: ['Binarized', 'Weighted']\ndisable this type of centrality with:\nweight_options: []",
              "items": {
                "type": "string",
                "enum": [
                  "Binarized",
                  "Weighted"
                ]
              }
            },
            "correlation_threshold_option": {
              "type": "string",
              "description": "Select the type of threshold used when creating the eigenvector centrality adjacency matrix.\noptions:\n'Significance threshold', 'Sparsity threshold', 'Correlation threshold'",
              "enum": [
                "Significance threshold",
                "Sparsity threshold",
                "Correlation threshold"
              ],
              "default": "Sparsity threshold"
            },
            "correlation_threshold": {
              "type": "number",
              "description": "Based on the Threshold Type selected above, enter a Threshold Value.\nP-value for Significance Threshold\nSparsity value for Sparsity Threshold\nPearson's r value for Correlation Threshold",
              "default": 0.001
            }
          }
        },
        "local_functional_connectivity_density": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "weight_options": {
              "type": "array",
              "description": "Enable/Disable lFCD by selecting the connectivity weights\nweight_options: ['Binarized', 'Weighted']\ndisable this type of centrality with:\nweight_options: []",
              "items": {
                "type": "string",
                "enum": [
                  "Binarized",
                  "Weighted"
                ]
              }
            },
            "correlation_threshold_option": {
              "type": "string",
              "description": "Select the type of threshold used when creating the lFCD adjacency matrix.\noptions:\n'Significance threshold', 'Correlation threshold'",
              "enum": [
                "Significance threshold",
                "Correlation threshold"
              ],
              "default": "Correlation threshold"
            },
            "correlation_threshold": {
              "type": "number",
              "description": "Based on the Threshold Type selected above, enter a Threshold Value.\nP-value for Significance Threshold\nSparsity value for Sparsity Threshold\nPearson's r value for Correlation Threshold",
              "default": 0.6
            }
          }
        }
      }
    },
    "PyPEER": {
      "type": "object",
      "description": "PACKAGE INTEGRATIONS",
      "additionalProperties": false,
      "properties": {
        "run": {
          "type": "boolean",
          "description": "Training of eye-estimation models. Commonly used for movies data/naturalistic viewing.",
          "default": false
        },
        "eye_scan_names": {
          "type": "array",
          "description": "PEER scan names to use for training\nExample: ['peer_run-1', 'peer_run-2']",
          "items": {
            "type": "string"
          }
        },
        "data_scan_names": {
          "type": "array",
          "description": "Naturalistic viewing data scan names to use for eye estimation\nExample: ['movieDM']",
          "items": {
            "type": "string"
          }
        },
        "eye_mask_path": {
          "type": "string",
          "description": "Template-space eye mask",
          "default": "$FSLDIR/data/standard/MNI152_T1_${func_resolution}_eye_mask.nii.gz"
        },
        "stimulus_path": {
          "type": "string",
          "description": "PyPEER Stimulus File Path\nThis is a file describing the stimulus locations from the calibration sequence.",
          "default": "None"
        },
        "minimal_nuisance_correction": {
          "type": "object",
          "description": "PyPEER Minimal nuisance regression\nNote: PyPEER employs minimal preprocessing - these choices do not reflect what runs in the main pipeline.\nPyPEER uses non-nuisance-regressed data from the main pipeline.",
          "additionalProperties": false,
          "properties": {
            "peer_gsr": {
              "type": "boolean",
              "description": "Global signal regression (PyPEER only)",
              "default": true
            },
            "peer_scrub": {
              "type": "boolean",
              "description": "Motion scrubbing (PyPEER only)",
              "default": false
            },
            "scrub_thresh": {
              "type": "number",
              "description": "Motion scrubbing threshold (PyPEER only)",
              "default": 0.2
            }
          }
        }
      }
    }
  },
  "required": [
    "pipeline_setup"
  ]
}